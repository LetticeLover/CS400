import java.util.Scanner;import java.io.File;import java.util.ArrayList;import java.util.List;import java.io.IOException;import java.util.Comparator;public class Backend implements BackendInterface{		private IterableSortedCollection<Song> tree;	private ArrayList<Song> sorted;	private Integer rangeLow;	private Integer rangeHigh;	private Integer filter;		//constructor:	public Backend(IterableSortedCollection<Song> tree){		this.tree = tree;	}		public void readData(String filename) throws IOException{		Scanner scanner;		try{			File file = new File(filename);			scanner = new Scanner(file);		} catch(Exception e){			throw new IOException("File not found");		}		if(scanner.hasNextLine()){			scanner.nextLine();		}		int ln =1;		while(scanner.hasNextLine()){			int qs =0; //number of quotes			int idx =0; //index after previous comma			int col = 0; //column index of parts			String line = scanner.nextLine();			String[] parts = new String[15];			for(int i =0; i<line.length(); i++){				if( (line.substring(i,i+1).equals(",") && (qs%2 == 0) ) || (i == line.length()-1) ){					parts[col] = line.substring(idx,i);					idx = i+1;					col++;				}else if( (i < line.length()-2) && (line.substring(i,i+2).equals("\"\"")) ){					line = line.substring(0,i) + "\"" + line.substring(i+2,line.length()-1);				}else if( line.substring(i,i+1).equals("\"") ){					line = line.substring(0,i) + line.substring(i+1,line.length()-1);					qs++;				}			}			try{				Integer.parseInt(parts[3]);			} catch(Exception e){				parts[0] = parts[0] + parts[1];				for(int j=2; j<parts.length-1;j++){					parts[j] = parts[j+1];				}			}						tree.insert(new Song(parts[0],parts[1],parts[2],Integer.parseInt(parts[3]),Integer.parseInt(parts[4]),Integer.parseInt(parts[5]),Integer.parseInt(parts[6]),Integer.parseInt(parts[7]),Integer.parseInt(parts[8]) , new yearComparator() ) );		}		scanner.close();			}		public List<String> getRange(Integer low, Integer high){		ArrayList<Song> temp = new ArrayList<>();		List<String> out = new ArrayList<>();				this.getTree();				if(this.filter != null){			this.rangeLow = null;			this.rangeHigh = null;			this.setFilter(this.filter);		}				this.rangeLow = low;		if(low == null){			low = -999999999;		}				this.rangeHigh = high;		if(high == null){			high = 999999999;		}				this.sorted.sort( new yearComparator() );		for(int i=0; i<sorted.size();i++){			if( (this.sorted.get(i).getYear() >= low) && (this.sorted.get(i).getYear() <= high) ){				temp.add(sorted.get(i));			}else if (this.sorted.get(i).getYear() > high){				break;			}		}		this.sorted = temp;		for(int i =0; i< sorted.size();i++){			out.add(this.sorted.get(i).getTitle());		}		return out;	}		public List<String> setFilter(Integer threshold){		ArrayList<Song> temp = new ArrayList<>();		List<String> out = new ArrayList<>();				this.getTree();				if( (this.rangeLow != null) || (this.rangeHigh != null)){			this.filter = null;			this.getRange(this.rangeLow, this.rangeHigh);		}				this.filter = threshold;		if(threshold == null){			threshold = 999999999;		}				this.sorted.sort( new dbComparator());				for(int i=0; i<this.sorted.size();i++){			if(this.sorted.get(i).getLoudness() < threshold){				temp.add(this.sorted.get(i) );			}else{				break;			}		}		temp.sort( new yearComparator() );		this.sorted = temp;				for(int i =0; i< sorted.size();i++){			out.add( this.sorted.get(i).getTitle() );		}		return out;	}		public List<String> fiveMost(){		List<String> out = new ArrayList<>();		getTree();		this.sorted.sort( new fiveMostComparator() );		if(this.sorted.size() >=5){			for(int i=0; i< 5; i++){				out.add( this.sorted.get(i).getTitle() );			}		}else{			for(int i=0; i< this.sorted.size(); i++){				out.add( this.sorted.get(i).getTitle() );			}		}		return out;	}			//nested classes	private class fiveMostComparator implements Comparator<Song>{		public int compare(Song A, Song B){			int danceA = A.getDanceability();			int danceB = B.getDanceability();						if(danceA < danceB){				return 1;			}else if(danceA > danceB){				return -1;			}else{				return 0;			}		}	}		private class yearComparator implements Comparator<Song>{		public int compare(Song A, Song B){			int yearA = A.getYear();			int yearB = B.getYear();						if(yearA > yearB){				return 1;			}else if(yearA < yearB){				return -1;			}else{				return 0;			}		}	}		private class dbComparator implements Comparator<Song>{		public int compare(Song A, Song B){			int dbA = A.getLoudness();			int dbB = B.getLoudness();						if(dbA > dbB){				return 1;			}else if(dbA < dbB){				return -1;			}else{				return 0;			}		}	}		//helper methods	private void getTree(){		this.sorted = new ArrayList<Song>();		this.tree.forEach(this.sorted::add);	}	}